export default class{static iec(t,e){const i=this.optionsInit(e),r={1:i.byte,2:"KiB",3:"MiB",4:"GiB",5:"TiB",6:"PiB",7:"EiB",8:"ZiB",9:"YiB"};return"number"==typeof t?this.formatNumber(t,1024,r,i):this.formatBigInt(t,BigInt(1024),r,i)}static si(t,e){const i=this.optionsInit(e),r={1:i.byte,2:"kB",3:"MB",4:"GB",5:"TB",6:"PB",7:"EB",8:"ZB",9:"YB"};return"number"==typeof t?this.formatNumber(t,1e3,r,i):this.formatBigInt(t,BigInt(1e3),r,i)}static optionsInit(t){if(void 0!==t){const e=t.digits;if(void 0!==e&&(!Number.isInteger(e)||e<0))throw new RangeError("The options `digits` must be an integer greater than or equal to 0.")}return{space:t?.space??!1,byte:t?.byte??"byte",digits:t?.digits??0}}static formatNumber(t,e,i,r){if(Number.isNaN(t)||!Number.isFinite(t)||t<0)throw new RangeError("The file size must be a number greater than or equal to 0.");if(!Number.isSafeInteger(t))throw new RangeError(`\`BigInt\` should be used when specifying huge numbers (Value greater than ${Number.MAX_SAFE_INTEGER}).`);const n=r.space?" ":"",s=10**r.digits;let o="";for(const[r,a]of Object.entries(i)){const i=Number(r);if(t<e**i){o=`${Math.round(t/e**(i-1)*s)/s}${n}${a}`;break}}return o}static formatBigInt(t,e,i,r){if(t<0)throw new RangeError("The file size must be a number greater than or equal to 0.");const n=r.space?" ":"";for(const[r,s]of Object.entries(i)){const i=BigInt(r);if(t<e**i){const r=e**(i-1n);return`${(t+r/2n)/r}${n}${s}`}}const s=Object.keys(i),o=Object.values(i);return`${t/e**(BigInt(s[s.length-1])-1n)}${n}${o[o.length-1]}`}}
//# sourceMappingURL=FileSizeFormat.min.js.map